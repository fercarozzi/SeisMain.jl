var documenterSearchIndex = {"docs":
[{"location":"man/guide/#Package-guide-1","page":"Guide","title":"Package guide","text":"","category":"section"},{"location":"man/guide/#","page":"Guide","title":"Guide","text":"SeisMain.jl provides seismic data reading, writing and handling tools.  Format conversion is available between SEIS data and SEGY, and SU.","category":"page"},{"location":"man/guide/#","page":"Guide","title":"Guide","text":"With SeisMain.jl installed we can do a simple example showing format conversion","category":"page"},{"location":"man/guide/#","page":"Guide","title":"Guide","text":"using SeisMain, SeisPlot\nrun(`mkdir -p data`)\ndownload(\"http://seismic.physics.ualberta.ca/data/616_79_PR.SGY\", \"data/616_79_PR.SGY\")\nSegyToSeis(\"data/616_79_PR.SGY\", \"data/616_79_PR.seis\")\nSeisWindow(\"data/616_79_PR.seis\", \"data/616_79_PR_2s.seis\", key= [\"t\"], minval=[0.0], maxval=[2.0])\nd, head, extent = SeisRead(\"data/616_79_PR_2s.seis\")\n\nSeisPlotTX(d, title=\"Seismic Plot Example\", cmap=\"PuOr\", wbox=9,ylabel=\"Time(s)\",xlabel=\"Trace Number(index)\",dy=extent.d1)","category":"page"},{"location":"man/guide/#","page":"Guide","title":"Guide","text":"(Image: plot1)","category":"page"},{"location":"man/guide/#","page":"Guide","title":"Guide","text":"In the above example, we first download the data, then convert the data from SU data format to SEIS format, finally the data are plotted. ","category":"page"},{"location":"lib/public/#Public-Documentation-1","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"Documentation for public SeisMain.jl public interface","category":"page"},{"location":"lib/public/#Public-interface-1","page":"Public","title":"Public interface","text":"","category":"section"},{"location":"lib/public/#","page":"Public","title":"Public","text":"SegyToSeis\nSeisRead\nSeisReadHeaders\nSeisWrite\nSeisWriteHeaders\nSeisCopy\nSeisHeaderInfo\nSeisToSegy\nSeisRemove","category":"page"},{"location":"lib/public/#SeisMain.SegyToSeis","page":"Public","title":"SeisMain.SegyToSeis","text":"SegyToSeis(filename_in,filename_out;<keyword arguments>)\n\nConvert SEGY or SU data to seis format. The function needs input and output filenames.\n\nArguments\n\nformat=\"segy\" : Options are segy or su\nswap_bytes=true : If the flag equals true, the function swaps bytes\ninput_type=\"ibm\" : Options are ibm or ieee\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisRead","page":"Public","title":"SeisMain.SeisRead","text":"SeisRead(filename;<keyword arguments>)\n\nRead seismic data from a given filename in seis format. The format is comprised of three elements:\n\na text file (data extent) with geometry information\na binary file containing data (@data@)\na binary file containing headers (@headers@)\n\nKeyword arguments\n\ngroup=\"all\" : Options are all, some or gather\nkey=[\"imx\",\"imy\"]\nitrace=1 : Number of trace where the function starts reading\nntrace=10000 : Total number of traces to read\n\nOut\n\nd: data as 2d array\nh: headers as 1d array\nextent: extent of the data (try fieldnames(Extent) to see the information this contains)\n\nExample\n\nd,h,ext = SeisRead(filename)\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisReadHeaders","page":"Public","title":"SeisMain.SeisReadHeaders","text":"SeisReadHeaders(filename;<keyword arguments>)\n\nRead the headers of a input file in seis format\n\nArguments\n\ngroup=\"all\" : Options are all, some or gather\nkey=[]\nitrace=1 : Number of trace where the function starts reading\nntrace=100 : Total number of traces to read\n\nExample\n\nh = SeisRead(filename)\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisWrite","page":"Public","title":"SeisMain.SeisWrite","text":"SeisWrite(filename,d,h,extent;<keyword arguments>)\n\nWrite seismic data in seis format\n\nArguments\n\nfilename : Name of file to write/generate\nd: seismic data\nh::Array{Header,1}: headers as 1d array with elements of type Header\nextent::Extent : extent of the data (try names(Extent) to see the information this contains)\nitrace=1 : First trace number to write\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisWriteHeaders","page":"Public","title":"SeisMain.SeisWriteHeaders","text":"SeisWriteHeaders(filename,h;<keyword arguments>)\n\nWrite seismic headers in seis format\n\nArguments\n\nitrace=1 : First trace number to write\nupdate_tracenum=true \n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisCopy","page":"Public","title":"SeisMain.SeisCopy","text":"SeisCopy(in,out)\n\nCopy a seis input file to a seis output file. In and out should be of type AbstractString\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisHeaderInfo","page":"Public","title":"SeisMain.SeisHeaderInfo","text":"SeisHeaderInfo(filename;<keyword arguments>)\n\nPrint Seis header information to screen. The input is the name of the data file\n\nArguments\n\nntrace=100000 : Number of traces to analyze\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisToSegy","page":"Public","title":"SeisMain.SeisToSegy","text":"SeisToSegy(filename_in,filename_out;<keyword arguments>)\n\nConvert seis data to SU or SEGY format. The function needs input and output filenames.\n\nArguments\n\nsu=true : If the flag equals true, converts tu SU format, otherwise to SEGY format\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#SeisMain.SeisRemove","page":"Public","title":"SeisMain.SeisRemove","text":"SeisRemove(filename)\n\nDelete a seis file (deletes the text file, binary data file, and binary header file if there is one)\n\nCredits: AS, 2015\n\n\n\n\n\n","category":"function"},{"location":"#SeisMain.jl-1","page":"Home","title":"SeisMain.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A package to read, write and process seismic data in Julia *","category":"page"},{"location":"#Package-Features-1","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Convert data to a simple format\nWindow data according to defined keywords\nSort data\nBin seismic volumes\nOrganize data into patches to process independently\nOnce your data is processed, unpatch to a single volume","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"SeisMain, from the SeismicJulia project, can be installed using Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg> add SeisMain","category":"page"}]
}
